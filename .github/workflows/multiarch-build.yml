name: 🚀 Docker Build & Push to GHCR

on:
  push:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  PKG: sse-server
  KEEP: 3

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: arm64
            platform: linux/arm64
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Prepare simple Java project
        run: |
          mkdir -p src/main/java/com/example
          cat > src/main/java/com/example/App.java <<'EOF'
          package com.example;
          public class App {
              public static void main(String[] args) {
                  System.out.println("Hello Multi-Arch!");
              }
          }
          EOF

          cat > build.gradle <<'EOF'
          plugins { id 'java' }
          group = 'com.example'
          version = '1.0.0'
          repositories { mavenCentral() }
          jar {
              manifest {
                  attributes 'Main-Class': 'com.example.App'
              }
          }
          EOF

          echo "rootProject.name = 'java-test'" > settings.gradle

      - name: ☕ Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: 🔨 Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: build
    
      - name: 🔑 Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📝 Create Dockerfile
        run: |
          cat > Dockerfile <<'EOF'
          FROM eclipse-temurin:17-jre-alpine
          WORKDIR /app
          COPY build/libs/*.jar app.jar
          ENTRYPOINT ["java","-jar","app.jar"]
          EOF


      - name: 🏗️ Build & Push ${{ matrix.platform }}
        run: |
          IMAGE_NAME=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          IMAGE_TAG=$(echo "${GITHUB_REF_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')

          echo "📦 빌드 & 푸시: $REGISTRY/$IMAGE_NAME:${IMAGE_TAG}-${{ matrix.arch }}"

          docker buildx build \
            --platform ${{ matrix.platform }} \
            -t $REGISTRY/$IMAGE_NAME:${IMAGE_TAG}-${{ matrix.arch }} \
            --push .

  manifest:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 🔑 Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Create & Push Manifest
        run: |
          IMAGE_NAME=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          IMAGE_TAG=$(echo "${GITHUB_REF_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')

          echo "📦 멀티아키 manifest: $REGISTRY/$IMAGE_NAME:$IMAGE_TAG"

          docker buildx imagetools create \
            -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG \
            $REGISTRY/$IMAGE_NAME:${IMAGE_TAG}-amd64 \
            $REGISTRY/$IMAGE_NAME:${IMAGE_TAG}-arm64

      # - name: 🧹 Keep only latest image per branch tag
      #   run: |
      #     TAG=$(echo "${GITHUB_REF_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
      #     echo "Cleaning up old images for tag: $TAG"

      #     gh api "orgs/${{ github.repository_owner }}/packages/container/$PKG/versions" \
      #       --jq '. | sort_by(.updated_at) | reverse | .[] | select(.metadata.container.tags[] == "'"$TAG"'") | .id' |
      #       tail -n +2 | while read -r vid; do
      #         echo "Deleting old version: $vid"
      #         gh api --method DELETE "orgs/${{ github.repository_owner }}/packages/container/$PKG/versions/$vid"
      #       done
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: 🧹 Keep only last N versions overall
      #   run: |
      #     echo "Cleaning up, keeping only $KEEP most recent versions overall"

      #     gh api "orgs/${{ github.repository_owner }}/packages/container/$PKG/versions" \
      #       --jq '. | sort_by(.updated_at) | reverse | .[].id' |
      #       tail -n +$((KEEP+1)) | while read -r vid; do
      #         echo "Deleting old version: $vid"
      #         gh api --method DELETE "orgs/${{ github.repository_owner }}/packages/container/$PKG/versions/$vid"
      #       done
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
